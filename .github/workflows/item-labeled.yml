# Copyright VMware, Inc.
# SPDX-License-Identifier: APACHE-2.0

# This workflow is built to manage the triage support by using GH issues.
name: '[Support] Reasign tasks'
on:
  workflow_call:
    secrets:
      BITNAMI_SUPPORT_BOARD_TOKEN:
        required: true
# Remove all permissions by default
permissions: {}
jobs:
  get-info:
    name: Get labels info
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      label-mapping: ${{ steps.get-info.outputs.label-mapping }}
      label-keys: ${{ steps.get-info.outputs.label-keys }}
      assignable-label-keys: ${{ steps.get-info.outputs.assignable-label-keys }}
      author: ${{ steps.get-info.outputs.author }}
      assignees: ${{ steps.get-info.outputs.assignees }}
    steps:
      - name: Repo checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
        with:
          fetch-depth: 1
          repository: bitnami/support
      - name: Load .env file
        uses: xom9ikk/dotenv@de1ff27d319507880e6621e4d47424c677d95f68
      - id: get-info
        name: Get label mapping
        env:
          GITHUB_TOKEN: ${{ secrets.BITNAMI_SUPPORT_BOARD_TOKEN }}
        run: |
          author="${{ github.event.issue != null && github.event.issue.user.login || github.event.pull_request.user.login }}"
          repo_name="${{ github.event.repository.name }}"
          group="${{github.event.label.name == 'triage' && 'triage' || 'support' }}"
          assignment=$(echo "$REPO_ASSIGNMENT" | jq -cr ".\"${repo_name}\" // .default")
          assignment_team=$(echo "$assignment" | jq -cr ".\"${group}-teams\" // empty")
          assignees=$(echo "$assignment" | jq -cr ".\"${group}-assignees\" // empty")
          # If there is no assignees and the team is not empty
          if [[ -n "$assignment_team" ]] && [[ -z "$assignees" ]]; then
            assignees=$(gh api "/orgs/bitnami/teams/${assignment_team}/members" |jq -cr 'sort_by(.login)|map(.login)|join(",")')
          fi
          label_keys=$(echo "$LABEL_MAPPING" | jq -cr 'keys')
          assignable_label_keys=$(echo "$LABEL_MAPPING" | jq -cr '[to_entries[] | select(.value."assign-to-team-member"==true) | .key])
          echo "author=${author}" >> $GITHUB_OUTPUT
          echo "label-keys=${label_keys}" >> $GITHUB_OUTPUT
          echo "assignable-label-keys=${assignable_label_keys}" >> $GITHUB_OUTPUT
          echo "label-mapping=${LABEL_MAPPING}" >> $GITHUB_OUTPUT
          echo "assignees=${assignees}" >> $GITHUB_OUTPUT
  # For any opened or reopened issue, should be sent into Triage
  send_to_board:
    name: Move card
    runs-on: ubuntu-latest
    needs: get-info
    if : |
      github.event.action == 'labeled' && github.actor != 'bitnami-bot' &&
      contains(fromJson(needs.get-info.outputs.label-keys),github.event.label.name)
    steps:
      - name: Add to board
        id: add-to-project
        uses: actions/add-to-project@0be3b6580ae2145e72e0ada85d693ab71a5f17d6
        with:
          # Support project
          project-url: https://github.com/orgs/bitnami/projects/4
          github-token: ${{ secrets.BITNAMI_SUPPORT_BOARD_TOKEN }}
      - name: Add to column
        uses: EndBug/project-fields@47306ad805cdba6fc5bb9e698b9d0c81c366c629
        with:
          project_url: https://github.com/orgs/bitnami/projects/4
          github_token: ${{ secrets.BITNAMI_SUPPORT_BOARD_TOKEN }}
          operation: set
          fields: Status
          values: ${{ fromJson(needs.get-info.outputs.label-mapping)[github.event.label.name].column }}
  assign:
    name: Assign if needed
    runs-on: ubuntu-latest
    needs: get-info
    permissions:
      pull-requests: write
      issues: write
    if : |
      github.event.action == 'labeled' && github.actor != 'bitnami-bot' &&
      contains(fromJson(needs.get-info.outputs.assignable_label_keys),github.event.label.name)
    steps:
      - name: Assign issue/PR
        uses: pozil/auto-assign-issue@edee9537367a8fbc625d27f9e10aa8bad47b8723
        with:
          numOfAssignee: 1
          removePreviousAssignees: ${{ fromJson(needs.get-info.outputs.label-mapping)[github.event.label.name].remove-previous-assignees }}
          assignees: ${{ needs.get-info.outputs.assignees }}
          # If we have repos with only one assignees we allow selfAssignment
          allowSelfAssign: ${{ needs.get-info.outputs.assignees == needs.get-info.outputs.author }}
  remove-labels:
    name: Remove previous labels
    runs-on: ubuntu-latest
    needs: get-info
    permissions:
      pull-requests: write
      issues: write
    if : |
      github.event.action == 'labeled' && github.actor != 'bitnami-bot' &&
      contains(fromJson(needs.get-info.outputs.label-keys),github.event.label.name)
    steps:
      - name: Remove innecesary tags
        uses: fmulero/labeler@f49bf680252fc8ac12cbebb6e0ed8ea19d0712da
        with:
          remove-labels: ${{ join(fromJson(needs.get-info.outputs.label-mapping)[github.event.label.name].labels-to-remove, ',') }}